#pragma checksum "C:\Users\rcwww\Desktop\Y2T1\2104\Project\ict2104_carProj\2101WebPortal\2101WebPortal\Views\Student\Play.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a1835f70a7ad4c56b3c622fb07e8d16db7c1bbbd"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Student_Play), @"mvc.1.0.view", @"/Views/Student/Play.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\rcwww\Desktop\Y2T1\2104\Project\ict2104_carProj\2101WebPortal\2101WebPortal\Views\_ViewImports.cshtml"
using Vraze;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\rcwww\Desktop\Y2T1\2104\Project\ict2104_carProj\2101WebPortal\2101WebPortal\Views\_ViewImports.cshtml"
using Vraze.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a1835f70a7ad4c56b3c622fb07e8d16db7c1bbbd", @"/Views/Student/Play.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d74cd0e45e0e484cb5131bc43133c1eb3e8ce708", @"/Views/_ViewImports.cshtml")]
    public class Views_Student_Play : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Vraze.Models.Challenge>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/blockly/blockly_compressed.js?v=202106271134"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/blockly/blocks_compressed.js?v=202106271134"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/blockly/msg/js/en.js?v=202106271134"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/blockly/javascript_compressed.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-controller", "Student", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "Index", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "C:\Users\rcwww\Desktop\Y2T1\2104\Project\ict2104_carProj\2101WebPortal\2101WebPortal\Views\Student\Play.cshtml"
  
    ViewData["Title"] = "Play Challenge";

#line default
#line hidden
#nullable disable
            WriteLiteral("\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a1835f70a7ad4c56b3c622fb07e8d16db7c1bbbd5793", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a1835f70a7ad4c56b3c622fb07e8d16db7c1bbbd6890", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a1835f70a7ad4c56b3c622fb07e8d16db7c1bbbd7987", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a1835f70a7ad4c56b3c622fb07e8d16db7c1bbbd9084", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"

    <style>
        .checkmark__circle {
            stroke-dasharray: 166;
            stroke-dashoffset: 166;
            stroke-width: 2;
            stroke-miterlimit: 10;
            stroke: #7ac142;
            fill: none;
            animation: stroke 0.6s cubic-bezier(0.65, 0, 0.45, 1) forwards;
        }

        .checkmark {
            width: 56px;
            height: 56px;
            border-radius: 50%;
            display: block;
            stroke-width: 2;
            stroke: #fff;
            stroke-miterlimit: 10;
            margin: 10% auto;
            box-shadow: inset 0px 0px 0px #7ac142;
            animation: fill .4s ease-in-out .4s forwards, scale .3s ease-in-out .9s both;
        }

        .checkmark__check {
            transform-origin: 50% 50%;
            stroke-dasharray: 48;
            stroke-dashoffset: 48;
            animation: stroke 0.3s cubic-bezier(0.65, 0, 0.45, 1) 0.8s forwards;
        }

        ");
                WriteLiteral("@keyframes stroke {\n            100% {\n                stroke-dashoffset: 0;\n            }\n        }\n\n        ");
                WriteLiteral("@keyframes scale {\n            0%, 100% {\n                transform: none;\n            }\n\n            50% {\n                transform: scale3d(1.1, 1.1, 1);\n            }\n        }\n\n        ");
                WriteLiteral(@"@keyframes fill {
            100% {
                box-shadow: inset 0px 0px 0px 30px #7ac142;
            }
        }

        .carousel-control-prev-icon {
            background-image: url(""data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23424242' viewBox='0 0 8 8'%3E%3Cpath d='M5.25 0l-4 4 4 4 1.5-1.5-2.5-2.5 2.5-2.5-1.5-1.5z'/%3E%3C/svg%3E"") !important;
        }

        .carousel-control-next-icon {
            background-image: url(""data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23424242' viewBox='0 0 8 8'%3E%3Cpath d='M2.75 0l-1.5 1.5 2.5 2.5-2.5 2.5 1.5 1.5 4-4-4-4z'/%3E%3C/svg%3E"") !important;
        }
    </style>
");
            }
            );
            WriteLiteral("\n<div class=\"row\">\n    <div class=\"col-md-12\">\n        <h6>\n            <nav aria-label=\"breadcrumb\">\n                <ol class=\"breadcrumb\">\n                    <li class=\"breadcrumb-item\">");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a1835f70a7ad4c56b3c622fb07e8d16db7c1bbbd12528", async() => {
                WriteLiteral("Home");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Controller = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_5.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("</li>\n                    <li class=\"breadcrumb-item active\" aria-current=\"page\">Attempt Challenge ");
#nullable restore
#line 82 "C:\Users\rcwww\Desktop\Y2T1\2104\Project\ict2104_carProj\2101WebPortal\2101WebPortal\Views\Student\Play.cshtml"
                                                                                        Write(Model.ChallengeId);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</li>
                </ol>
            </nav>
        </h6>
    </div>
</div>
<div id=""modalTutorial"" class=""modal"" tabindex=""-1"" role=""dialog"">
    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"">Tutorial Guide</h5>
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
                <div id=""carouselExampleControls"" class=""carousel slide"" data-ride=""carousel"" data-interval=""false"">
                    <div class=""carousel-inner"">
                        <div class=""carousel-item active"">
                            <img src=""https://res.cloudinary.com/dj6afbyih/image/upload/v1638004271/ezgif.com-gif-maker_qcpsvp.gif"" class=""d-block w-100"" alt=""..."">
                            <div class=""carousel-caption d-none d-md-bl");
            WriteLiteral(@"ock py-1 px-2"" style=""background-color: rgba(0,0,0,0.3);"">
                                <h5>Step 1</h5>
                                <p>Click and drag the command block into your workspace.</p>
                            </div>
                        </div>
                        <div class=""carousel-item"">
                            <img src=""https://res.cloudinary.com/dj6afbyih/image/upload/v1638006937/goal_msuqj8.jpg"" class=""d-block w-100"" alt=""..."">
                            <div class=""carousel-caption d-none d-md-block py-1 px-2"" style=""background-color: rgba(0,0,0,0.3);"">
                                <h5>Step 2</h5>
                                <p>Click the <span class=""badge badge-info"" style=""font-size:14px;"">Submit</span> button to send your command to the car.</p>
                            </div>
                        </div>
                        <div class=""carousel-item"">
                            <div class=""d-flex justify-content-center w-100"" style=""min-height: 263.97");
            WriteLiteral(@"px;"">
                                <svg class=""checkmark"" xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 52 52"">
                                    <circle class=""checkmark__circle"" cx=""26"" cy=""26"" r=""25"" fill=""none"" />
                                    <path class=""checkmark__check"" fill=""none"" d=""M14.1 27.2l7.1 7.2 16.7-16.8"" />
                                </svg>
                            </div>
                            <div class=""carousel-caption d-none d-md-block py-1 px-2"" style=""background-color: rgba(0,0,0,0.3);"">
                                <h5>Step 3</h5>
                                <p>If you solve the challenge, you get to see your car move! Else, you will receive a hint.</p>
                            </div>
                        </div>
                    </div>
                    <a class=""carousel-control-prev"" href=""#carouselExampleControls"" role=""button"" data-slide=""prev"">
                        <span class=""carousel-control-prev-icon"" aria-hidden=""true""></span>
 ");
            WriteLiteral(@"                       <span class=""sr-only"">Previous</span>
                    </a>
                    <a class=""carousel-control-next"" href=""#carouselExampleControls"" role=""button"" data-slide=""next"">
                        <span class=""carousel-control-next-icon"" aria-hidden=""true""></span>
                        <span class=""sr-only"">Next</span>
                    </a>
                </div>
            </div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-success"" data-dismiss=""modal"">I get it!</button>
            </div>
        </div>
    </div>
</div>
<div class=""row"">
    <div class=""col-md-12 text-right"">
        <span id=""btnTutorial"" class=""btn btn-sm btn-success"">See Tutorial</span>
    </div>
</div>
<div class=""row"">
    <div class=""col-md-12 text-center mb-2"">
        <img");
            BeginWriteAttribute("src", " src=\"", 6638, "\"", 6662, 1);
#nullable restore
#line 150 "C:\Users\rcwww\Desktop\Y2T1\2104\Project\ict2104_carProj\2101WebPortal\2101WebPortal\Views\Student\Play.cshtml"
WriteAttributeValue("", 6644, Model.MapImageUrl, 6644, 18, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(@" alt=""mapImage"" width=""300"" />
    </div>
    <div class=""col-md-10"">
        <p class=""text-justify"">Solve the challenge by using the follow command blocks below! Once you are ready to submit your solution, click on the <span class=""badge badge-info"" style=""font-size: 14px;"">Submit</span> button!</p>
    </div>
    <div class=""col-md-2"">
        <span class=""btn btn-info btn-block"" id=""btnSubmit"">Submit</span>
    </div>
    <div class=""col-md-12 mt-2"">
        <input type=""text"" id=""tbCarCommand"" class=""form-control w-100 d-none"" />
        <div id=""blocklyDiv"" style=""height: 480px; width: 100%;""></div>
        <xml id=""toolbox"" style=""display: none"">
");
            WriteLiteral("            <block type=\"controls_repeat_ext\"></block>\n");
            WriteLiteral("            <block type=\"math_number\"></block>\n            <block type=\"control_left\"></block>\n            <block type=\"control_forward\"></block>\n            <block type=\"control_backward\"></block>\n            <block type=\"control_right\"></block>\n");
            WriteLiteral(@"        </xml>
        <!--Insert blocky code here!-->
    </div>
</div>

<!--Start of Javascript Portion-->
<script>
    var workspace = null;
    function setupBlockly()
    {
        Blockly.Blocks['control_left'] = {
            init: function () {
                this.appendDummyInput()
                    .setAlign(Blockly.ALIGN_CENTRE)
                    .appendField(""turn left"");
                this.setPreviousStatement(true, null);
                this.setNextStatement(true, null);
                this.setColour(230);
                this.setTooltip("""");
                this.setHelpUrl("""");
            }
        };
        Blockly.Blocks['control_right'] = {
            init: function () {
                this.appendDummyInput()
                    .setAlign(Blockly.ALIGN_CENTRE)
                    .appendField(""turn right"");
                this.setPreviousStatement(true, null);
                this.setNextStatement(true, null);
                this.setColour(120);
                this.setTooltip");
            WriteLiteral(@"("""");
                this.setHelpUrl("""");
            }
        };
        Blockly.Blocks['control_forward'] = {
            init: function () {
                this.appendDummyInput()
                    .setAlign(Blockly.ALIGN_CENTRE)
                    .appendField(""forward"");
                this.setPreviousStatement(true, null);
                this.setNextStatement(true, null);
                this.setColour(20);
                this.setTooltip("""");
                this.setHelpUrl("""");
            }
        };
        Blockly.Blocks['control_backward'] = {
            init: function () {
                this.appendDummyInput()
                    .setAlign(Blockly.ALIGN_CENTRE)
                    .appendField(""turn backward"");
                this.setPreviousStatement(true, null);
                this.setNextStatement(true, null);
                this.setColour(65);
                this.setTooltip("""");
                this.setHelpUrl("""");
            }
        };
        Blockly.Blocks['control_while");
            WriteLiteral(@"'] = {
            init: function () {
                this.appendStatementInput(""while"")
                    .setCheck(null)
                    .setAlign(Blockly.ALIGN_CENTRE)
                    .appendField(""while"");
                this.appendStatementInput(""do"")
                    .setCheck(null)
                    .setAlign(Blockly.ALIGN_CENTRE)
                    .appendField(""do"");
                this.setPreviousStatement(true, null);
                this.setNextStatement(true, null);
                this.setColour(260);
                this.setTooltip("""");
                this.setHelpUrl("""");
            }
        };
        Blockly.Blocks['no_obs'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField(""no obstacles"");
                this.setPreviousStatement(true, null);
                this.setColour(160);
                this.setTooltip("""");
                this.setHelpUrl("""");
            }
        };

        Blockly.JavaScript['contro");
            WriteLiteral(@"l_right'] = function (block) {
            var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
            // TODO: Assemble JavaScript into code variable.
            var code = 'R';
            return code;
        };
        Blockly.JavaScript['control_forward'] = function (block) {
            var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
            // TODO: Assemble JavaScript into code variable.
            var code = 'F';
            return code;
        };
        Blockly.JavaScript['control_left'] = function (block) {
            var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
            // TODO: Assemble JavaScript into code variable.
            var code = 'L';
            return code;
        };
        Blockly.JavaScript['control_backward'] = function (block) {
            var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
            // TODO: Assemble JavaScript into code variable.
            var co");
            WriteLiteral("de = \'B\';\n            return code;\n        };\n\n\n        workspace = Blockly.inject(\'blocklyDiv\',\n            { toolbox: document.getElementById(\'toolbox\') });\n    }\n\n    setupBlockly();\n    $(document).ready(function () {\n");
#nullable restore
#line 290 "C:\Users\rcwww\Desktop\Y2T1\2104\Project\ict2104_carProj\2101WebPortal\2101WebPortal\Views\Student\Play.cshtml"
           string booleanVar = "false"; 

#line default
#line hidden
#nullable disable
#nullable restore
#line 291 "C:\Users\rcwww\Desktop\Y2T1\2104\Project\ict2104_carProj\2101WebPortal\2101WebPortal\Views\Student\Play.cshtml"
         if (Model.IsTutorialChallenge)
        {
            booleanVar = "true";
        }

#line default
#line hidden
#nullable disable
            WriteLiteral("        var showTutorialDialog = ");
#nullable restore
#line 295 "C:\Users\rcwww\Desktop\Y2T1\2104\Project\ict2104_carProj\2101WebPortal\2101WebPortal\Views\Student\Play.cshtml"
                            Write(booleanVar);

#line default
#line hidden
#nullable disable
            WriteLiteral(@";
        if (showTutorialDialog)
        {
            $('#modalTutorial').modal('toggle');
        }

        $('#btnTutorial').click(function () {
            $('#modalTutorial').modal('toggle');
        });

        $('#btnSubmit').click(function () {
            SubmitForm();
        });

        // This function will simplify the blockly command for the robot car to process
        function SimplifyCarCommand(blocklyCommand)
        {
            console.log(""Received From the Blockly Workspace: "", blocklyCommand);

            var indexOfKeyword = blocklyCommand.indexOf(""for"");

            if (indexOfKeyword >= 0) {
                var forLoopCommand = blocklyCommand.substring(indexOfKeyword, blocklyCommand.length - indexOfKeyword);
                var carCommand = """";

                var commandBeforeLoopResult = blocklyCommand.match(/(.*)for/);
                var repeatCommandResult = blocklyCommand.match(/{\n  (.*)}/);
                var countResult = blocklyCommand.match(/count < (.*);/);
     ");
            WriteLiteral(@"           var commandAfterLoopResult = blocklyCommand.match(/}\n(.*)/);

                /* Append the commands before the fot loop to the carCommand variable */
                carCommand += commandBeforeLoopResult[1];

                /* Repeat the commands in the for loop and append it to the carCommand variable */
                for (i = 0; i < parseInt(countResult[1]); i++) {
                    carCommand += repeatCommandResult[1];
                }

                /* Append the commands after the for loop to the carCommand variable */
                carCommand += commandAfterLoopResult[1];

                console.log(""Simplified Command:"", carCommand);

                return carCommand;
            }
            else {
                return blocklyCommand;
            }
        }

        /* This function will submit the data from the blocky code to the API */
        function SubmitForm()
        {
            var carCommand = SimplifyCarCommand(Blockly.JavaScript.workspaceToCode(workspace)); 
");
            WriteLiteral(@"
            /* Constructor representing the SendCarCommandDataModel in the Models folder */
            function SendCarCommandDataModel(carCommand) {
                this.CarCommand = carCommand;
            }

            /* Assign the values to the contructor so that it can be converted into Json and sent over to the API */
            var webFormData = new SendCarCommandDataModel(carCommand);

            var webFormDataInString = JSON.stringify(webFormData);

            /* Send the json over to the /Student/SubmitCarCommand */
            $.ajax({
                    url: ""/student/submitCarCommand/");
#nullable restore
#line 362 "C:\Users\rcwww\Desktop\Y2T1\2104\Project\ict2104_carProj\2101WebPortal\2101WebPortal\Views\Student\Play.cshtml"
                                               Write(Model.ChallengeId);

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                type: ""POST"",
                dataType: ""json"",
                contentType: ""application/json"",
                data: webFormDataInString,
                success: function (response) { /* response is the object containing the response received from the controller */
                            console.log(response);
                            if (response[""status""] == ""Correct"") {
                                Swal.fire({
                                title: response[""status""],
                            text: response[""message""],
                            icon: 'success',
                            showCancelButton: false,
                        }).then((result) => {
                            if (result.isConfirmed) {
                                location.replace('/ChallengeHistory/View/");
#nullable restore
#line 377 "C:\Users\rcwww\Desktop\Y2T1\2104\Project\ict2104_carProj\2101WebPortal\2101WebPortal\Views\Student\Play.cshtml"
                                                                    Write(Model.ChallengeId);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"');
                            }
                        });
                            }
                            else if (response[""status""] == ""Incorrect"")
                            {
                                var htmlStr = '';

                                for (i = 0; i < response[""hints""].length; i++)
                                {
                                    htmlStr += ('<li>' + response[""hints""][i] + '</li>');
                                }

                                Swal.fire({
                                title: response[""status""],
                            text: response[""message""],
                            icon: 'warning',
                            showCancelButton: false,
                        }).then((result) => {
                        if (result.isConfirmed) {
                            Swal.fire({
                            html: '<ol>' + htmlStr +'</ol>',
                                    showCancelButton: false
                            ");
            WriteLiteral("    });\n                            }\n                        });\n                    }\n                },\n                error: function (error) { console.log(error); }\n            });\n        }\n    });\n</script>\n<!--End of Javascript Portion-->");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Vraze.Models.Challenge> Html { get; private set; }
    }
}
#pragma warning restore 1591
